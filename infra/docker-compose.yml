version: '3.8'
services:
  kafka-1:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-1
    ports:
      - "9092:9092"     # 호스트에서 브로커1에 직접 접속할 때
      - "29092:29092"   # 외부에서 직접 접속할 때 리스너
      - "29093:29093"  # Controller 포트 expose
    environment:
        # 클러스터 ID  (한번만 생성 후 고정값 사용)
        # docker run --rm confluentinc/cp-kafka:7.4.0 kafka-storage random-uuid
      CLUSTER_ID: "gp9R2mwwSaG2yjUkejHfow"

        # KRaft (zookeeper 대신)
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@172.31.35.137:29093,2@172.31.37.83:29093,3@172.31.34.10:29093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      
        # 리스너 설정 (내부/외부/컨트롤러)  
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:29093,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      
        # 클라이언트에게 알려줄 주소 (광고 주소)
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://172.31.35.137:9092,PLAINTEXT_HOST://3.37.248.119:29092
      
        # 클러스터/토픽 기본값
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_NUM_PARTITIONS: 3              # 새로 생성되는 토픽 기본 파티션 수
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    volumes:
      - kafka_1_data:/var/lib/kafka/data
    networks: [main_net]
  
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: myapp
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks: [main_net]

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    container_name: schema-registry
    depends_on:
      - kafka-1
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://172.31.35.137:9092,PLAINTEXT://172.31.37.83:9092,PLAINTEXT://172.31.34.10:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: 3
    networks: [main_net]

  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.4.0
    container_name: kafka-connect
    depends_on:
      - kafka-1
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 172.31.35.137:9092,172.31.37.83:9092,172.31.34.10:9092  #kafka 브로커 주소 지정
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_GROUP_ID: "kafka-connect-group"

      CONNECT_CONFIG_STORAGE_TOPIC: "connect-configs"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offsets"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_STATUS_STORAGE_TOPIC: "connect-status"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 3

      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_PORT: 8083
        #커넥터 설치 경로
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
    networks: [main_net]

  # 오직 개발의 편의를 위해서...
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "18080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=172.31.35.137:9092,172.31.37.83:9092,172.31.34.10:9092

  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: backend
    expose:
      - "8000"
    environment:
      DJANGO_SETTINGS_MODULE: config.settings
      DATABASE_URL: mysql://root:root@mysql:3306/myapp
      KAFKA_BOOTSTRAP_SERVERS: "172.31.35.137:9092,172.31.37.83:9092,172.31.34.10:9092"
      COUPON_ISSUE_TOPIC: "coupon-topic-6p"
      JWT_ACCESS_MIN: 120
    ports:
      - "8000:8000"
    depends_on:  # backend 시작 전에 준비될 것들.
      - mysql
      - kafka-1
    volumes:
      - ../backend:/app
      - static_volume:/app/staticfiles
    networks: [main_net]

  consumer:
    build: ../backend  # backend와 동일 이미지 사용
      #container_name: consumer  consumer 스케일링하기위해 name x.
    depends_on:
      - mysql
      - kafka-1
    environment:
      DJANGO_SETTINGS_MODULE: config.settings
      DATABASE_URL: mysql://root:root@mysql:3306/myapp
      KAFKA_BOOTSTRAP_SERVERS: "172.31.35.137:9092,172.31.37.83:9092,172.31.34.10:9092"
      KAFKA_CONSUMER_GROUP: "coupon-consumer-group"
      KAFKA_TOPIC: "coupon-topic-6p"
      #PYTHONUNBUFFERED: "1"   # 로그 실시간 출력
    command: ["python","manage.py","coupon_issue_consumer",
              "--topic","coupon-topic-6p",
              "--group","coupon-consumer-group",
              "--bootstrap","172.31.35.137:9092,172.31.37.83:9092,172.31.34.10:9092"]  # override됨
    restart: always
    networks: [main_net]

  proxy:
    build:
      context: ..  # main-pj
      dockerfile: infra/proxy/Dockerfile
    container_name: proxy
    expose:
      - "80"
    ports:
      - "80:80"
    volumes:
      - static_volume:/app/staticfiles
    depends_on:
      - backend
    networks: [main_net]  
  
  k6:
    image: grafana/k6:0.49.0        # 최신권장
    container_name: k6
    depends_on: [proxy]
    working_dir: /work              # 스크립트 기준 경로
    # entrypoint는 지정하지 않음 (이미지 기본 ENTRYPOINT가 'k6')
    command:
      - run
      - -e
      - BASE_URL=http://proxy
      - -e
      - TOTAL=5000
      - -e
      - DURATION=120s
      - -e
      - CSV=1
      - /work/arrivals_unique_users.js
    volumes:
      - ../scripts:/work:ro         # k6 스크립트들
      - ./:/infra:ro                # infra/users.csv
    networks: [main_net]
  
  influxdb:
    image: influxdb:1.8
    container_name: influxdb
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=k6
      - INFLUXDB_HTTP_AUTH_ENABLED=false
    volumes:
      - influxdb_data:/var/lib/influxdb
    networks: [main_net]

volumes:
  mysql_data: {}
  static_volume: {}
  kafka_1_data: {}
  influxdb_data: {}

networks:
  main_net: {}
